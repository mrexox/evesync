* Разобраться с use-case
** Устанавливаем пакет							-> инициализация демонов -> создание "снэпшота" /etc и получение списка установленных пакетов
** Правим файл								-> обновляется база изменений
** Устанавливаем пакет							-> обновляется база изменений
** Выполняем команду для того, чтобы пометить файл отслеживаемым	-> файл добавляется в "снэпшот"
** Выполняем команду для создания снэпшота системы			-> Получаем снэпшот системы и базу изменений
** Выполняем команду для откатывания на вчерашний день			-> получаем состояние вчерашнего дня
** Выполняем команду применения снэпшота				-> Получаем ошибку, если системы не совпадают или что-то не то в конфигурациях
* Разобраться с технологиями
** Разобраться с inotify
** ПОЛОЖДЁТ Исследовать утилиты копирования файлов 
** Разобраться с необходимыми демонами
*** fsmoond - Будет следить за событиями, на которые подпишется
    с помощью inotify. Будет работать со снэпшотом системы и 
    вычислять diff, а также генерировать запрос демону..
*** fsmoondata - Будет работать с данными об изменениях
    пакетов и файлов, а также работать с базой данных (sqlite)
    и по возможности с сервером централизованного контроля
*** Тут упомянулось про сервер централизованного контроля
    так вот, для этого можно отдельный демон fsmoonserv. 
    Он будет общаться с системами через сокеты.
    Возможно, лучше RabbitMQ, ZeroMQ, что-то ещё.
   
------
* Log
<2018-09-23 Sun> Утро
Нельзя использовать gem rb-notify, поскольку он 2017-го года релиза
И версия у него - 0.9.10 => сырой проекта

Нужно написать свой маленький сишный демон для получения информации
от файловой системы с определённых файлов

<2018-09-23 Sun> Вечер
Нужно рассмотреть подход для сервиса, который будет следить за файлами.
Первый подход - использовать код на ruby с прекомпилированными функциями на C.
Второй подход - писать демона на C.

Плюсы подхода 1:
- Не нужно лишней интеграции.
- Войдёт в один gem.

Минусы подхода 1:
- Сложности в реализации. Трудно интегрировать код, поэтому притётся писать
  только функциональную часть, а логику выносить в ruby.

Плюсы подхода 2:
- Полноценный независимый сервис, к которому можно построить любой другой микро
  сервис для обработки событий.

Минусы подхода 2:
- Как будто бы лишнее деление, придётся поддерживать этот сервис отдельно,
  хотя отдельно использоваться он не планировался.
- Лишнее разделение сервиса на две части.
  Можно поспорить, поскольку микросервис должен делать одну вещь и делать её хорошо.
  Но мир не может быть идеальным, иногда нужно жертвовать идеальностью во имя 
  адекватности; задача - определить, является ли подход 2 таким уж хорошим, и
  является ли подход 1 таким уж плохим.

<2018-09-27 Thu>
https://github.com/leejarvis/ruby-c-example/blob/master/ext/hello/hello.c
Простейшее расширение
